CIRC_initialize();
CIRC_STEPT=0.1;
T=20;
DX=0.1;
N_JTL=40;
N=6.0/DX;
IC=0.5;
DX2=DX*DX;
Phi=0.0;

#Creates a Josephson Transmission line with N segments.
function JTL(name,N)
{
	my x;
	echo("Creating "+N+" JTL's");
	push_block();
	block(name);
	for(x=1;x<=N;x=x+1)
	{
		single_JTL(name+x);
	}
	for(x=1;x<N;x=x+1)
	{
		connect("OUT",name+x,"IN",name+(x+1));
	}
	connect(1,name,"IN",name+1);
	node_name(1,"IN");
	connect(2,name,"OUT",name+N);
	node_name(2,"OUT");
	pop_block();
}

function single_JTL(name)
{
	push_block();
	block(name);
	if (name=="JTL1")
	{
		add_L("L_in",1,2,0.75);
	}
	if (name!="JTL1")
	{
		add_L("L_in",1,2,0.75);
	}
	add_L("L_JJ1",2,3,0.05);
	add_JJ("JJ1",3,0,2.01,1.0);
	add_L("L2",2,4,0.75);
	add_L("Lx1",4,5,0.05);
	add_CS("I0",0,5,2.8);
	add_L("L3",4,6,0.75);
	add_L("L_JJ2",6,7,0.05);
	add_JJ("JJ2",7,0,2.01,1.0);
	add_L("L_out",6,8,0.75);
	node_name(1,"IN");
	connect(0,name,0,"MAIN");
	node_name(8,"OUT");
	pop_block();
}


function dc_sfq(name,Z)
{
	push_block();
	block(name);

	add_CSG("input_"+name,0,1,3.8,T,Z,SIG_PULSE);

	add_R("Ri",1,16,1.0);
	add_C("Ci",16,0,0.01);

	add_R("input_R",2,1,21.1);
	add_L("L1",2,3,1.27);
	add_L("L2",3,4,0.48);
	add_L("L3",4,0,1.36);
	add_JJ("JJ1",5,4,1.18,1.0);
	add_L("L4",5,6,0.26);
	add_JJ("JJ2",6,7,1.37,1.0);
	add_L("L5",7,0,0.07);


	add_L("L6",3,8,0.49);	
	add_JJ("JJ3",9,8,1.37,1.0);
	add_L("L7",6,9,0.08);
	add_L("L8",9,10,0.43);


	add_L("L10",10,11,0.03);
	add_CS("I1",0,11,2.98);
	add_L("L9",10,12,0.66);
	add_JJ("JJ4 - output",12,13,1.96,1.0);
	add_L("L11",13,0,0.05);
	node_name(12,"OUT");
	connect(0,name,0,"MAIN");
	pop_block();
}

dc_sfq("my-dcsfq",T/2);
JTL("JTL",N_JTL);
connect("OUT","my-dcsfq","IN","JTL");
add_R("MyR",19,0,1.0);
connect("OUT","JTL",19,"MAIN");

CIRC_build_trees();
#JTL1_L_in_L=4.5;
g=graph();

add_buffer(g,add_monitor(PHASE,"JJ2","JTL"+N_JTL));

for(x=1;x<=N_JTL;x=x+1)
{
#	add_buffer(g,add_monitor(VOLTAGE,"JJ2","JTL"+x));
#	add_buffer(g,add_monitor(VOLTAGE,"JJ1","JTL"+x));
}

add_buffer(g,add_monitor(VOLTAGE,"JJ2","JTL"+N_JTL));
CIRC_SOLVER=SOLVER_BILIN;
CIRC_run(600.0);
#CIRC_SOLVER=SOLVER_LU;
#CIRC_run(200.0);
plot_graph(g,"test_A.eps");
write_all("solution_test_A");
#exit(0);
return;