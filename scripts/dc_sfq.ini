CIRC_initialize();
CIRC_STEPT=0.1;
T=50;
DX=0.1;
N=6.0/DX;
IC=0.5;
DX2=DX*DX;
Phi=0.0;
CIRC_SOLVER=SOLVER_BILIN;



#Creates a Josephson Transmission line with N segments.
function JTL(name,N)
{
	my x;
	push_block();
	block(name);
	for(x=1;x<=N;x=x+1)
	{
		single_JTL(name+x);
	}
	for(x=1;x<N;x=x+1)
	{
		connect("OUT",name+x,"IN",name+(x+1));
	}
	connect(1,name,"IN",name+1);
	node_name(1,"IN");
	connect(2,name,"OUT",name+N);
	node_name(2,"OUT");
	pop_block();
}

function single_JTL(name)
{
	push_block();
	block(name);
	add_L("L_in",1,2,0.75);
	add_L("L_JJ1",2,3,0.05);
	add_JJ("JJ1",3,0,2.01,1.0);
	add_L("L2",2,4,0.75);
	add_L("Lx1",4,5,0.05);
	add_CS("I0",0,5,2.8);
	add_L("L3",4,6,0.75);
	add_L("L_JJ2",6,7,0.05);
	add_JJ("JJ2",7,0,2.01,1.0);
	add_L("L_out",6,8,0.75);
	node_name(1,"IN");
	connect(0,name,0,"MAIN");
	node_name(8,"OUT");
	pop_block();
}

#function creates a long Josephson junction with N junctions and discretization DX, critical current (of the individual junctions) Ic and damping alpha.
function long_JJ(N,name,Ic,alpha,DX)
{
	 my x;
	 my kappa;
	 kappa=0.0;
	 my DX2;
	 DX2=DX*DX;
	 block(name);
#	 add_PS("PS1",1,0,1.56);
	 for(x=1;x<=N+1;x=x+1)
	 {
		if (x>=N/2)
		{
			kappa=1.0;
		}
		add_CS("CS"+x,0,x,Ic*0.1);
		add_kappa_JJ("LJJ"+x,x,0,Ic,alpha,kappa);
		if (x!=N+1)
		{
		#L=DX2/Ic!!
			add_L("L"+x,x,x+1,DX2/Ic);
		}
	 }
	add_R("R0",N+1,0,1.0);
	add_R("R0",1,0,1.0);
	node_name(N,"R");
	node_name(1,"L");
	connect(0,name,0,"MAIN");
	block("MAIN");
}

function dc_sfq(name,Z)
{
block(name);

add_CSG("input_"+name,0,1,3.8,T,Z,SIG_PULSE);

add_R("Ri",1,16,1.0);
add_C("Ci",16,0,0.01);

add_R("input_R",2,1,21.1);
add_L("L1",2,3,1.27);
add_L("L2",3,4,0.48);
add_L("L3",4,0,1.36);
add_JJ("JJ1",5,4,1.18,1.0);
add_L("L4",5,6,0.26);
add_JJ("JJ2",6,7,1.37,1.0);
add_L("L5",7,0,0.07);


add_L("L6",3,8,0.49);
add_JJ("JJ3",9,8,1.37,1.0);
add_L("L7",6,9,0.08);
add_L("L8",9,10,0.43);


add_L("L10",10,11,0.03);
add_CS("I1",0,11,2.98);
add_L("L9",10,12,0.66);
add_JJ("JJ4 - output",12,13,1.96,1.0);
add_L("L11",13,0,0.05);
node_name(12,"OUT");
connect(0,name,0,"MAIN");
block("MAIN");
}


#This is the main circuit.

#Now we add a long Josephson junction.

long_JJ(N,"MyJJ",IC/N,0.1,DX);

dc_sfq("DCSFQ",T);
dc_sfq("DCSFQ2",T*1.5);

JTL("JTL1",2);
JTL("JTL2",2);
add_R("R1",3,4,0.1);
add_R("R2",5,6,0.1);


#Here we connect the Josephson junction to the RSFQ circuit and the DC-SFQ converter.


connect("IN","JTL1","OUT","DCSFQ");
connect("L","MyJJ",4,"MAIN");
connect("OUT","JTL1",3,"MAIN");

connect("IN","JTL2","OUT","DCSFQ2");
connect("R","MyJJ",6,"MAIN");
connect("OUT","JTL2",5,"MAIN");


CIRC_build_trees();
#CIRC_run(10000.0);

g=graph();
echo("G:"+g);
add_buffer(g,add_monitor(VOLTAGE,"R - output"));
t=add_monitor(VOLTAGE,"JJ4 - output");
add_buffer(g,t);
add_buffer(g,add_monitor(VOLTAGE,"JJ3"));
add_buffer(g,add_monitor(VOLTAGE,"JJ2"));
add_buffer(g,add_monitor(VOLTAGE,"JJ1"));

#v=graph();
#add_buffer(v,add_monitor(PHASE,12,0));
#add_buffer(v,add_monitor(PHASE,"JJ4 - output"));
#add_buffer(v,add_monitor(PHASE,"input"));
#add_buffer(v,add_monitor(PHASE,"input_R"));

h=graph();
add_buffer(h,add_monitor(PHASE,"R -output"));
add_buffer(h,add_monitor(PHASE,"JJ1"));
add_buffer(h,add_monitor(PHASE,"JJ2"));
add_buffer(h,add_monitor(PHASE,"JJ3"));
add_buffer(h,add_monitor(PHASE,"JJ4 - output"));

t=graph();
add_buffer(t,a=add_monitor(CURRENT,"R - output"));
add_buffer(t,add_monitor(CURRENT,"JJ1"));
add_buffer(t,add_monitor(CURRENT,"JJ2"));
add_buffer(t,add_monitor(CURRENT,"JJ3"));
add_buffer(t,add_monitor(CURRENT,"JJ4 - output"));

n=graph(add_monitor(CURRENT,"input_DCSFQ"));
add_buffer(n,add_monitor(CURRENT,"input_DCSFQ2"));

v=graph();
z=graph();
f=graph();
for(x=2;x<=N;x=x+2)
{
#	add_buffer(v,add_monitor(VOLTAGE,"LJJ"+x));
#	add_buffer(z,add_monitor(PHASE,"LJJ"+x));
#	add_buffer(f,add_monitor(CURRENT,"LJJ"+x));
}
	add_buffer(v,add_monitor(VOLTAGE,"LJJ"+N));
	add_buffer(z,add_monitor(PHASE,"LJJ"+N));
	add_buffer(f,add_monitor(CURRENT,"LJJ"+N));
maximize();
#freeze();
a=new_buffer("LJJ - phi_x");
gr=graph(a);
set_flush(a,0);
b=new_buffer("LJJ - phi");
gr=graph(b);
set_flush(b,0);
tile();
z=0;
freeze();
while(CIRC_T<200.0)
{
	CIRC_run(2.0);
	new_series(a);
	new_series(b);
	z=z+1;
	if (z==20)
	{
		z=0;
		flush_buffer(a);
#		flush_buffer(b);
	}
	for(y=2;y<=N;y=y+1)
	{
		add_value(a,(y-1)*DX,(eval("MyJJ_LJJ"+y+"_phi")-eval("MyJJ_LJJ"+(y-1)+"_phi"))/DX);
		add_value(b,(y-1)*DX,eval("MyJJ_LJJ"+y+"_phi"));
	}
}
write_all("dc_sfq_dt="+CIRC_STEPT+"_solver="+CIRC_SOLVER);
thaw();
plot_graph(z,"phase_dx="+DX+".eps");
#set_style(a,STYLE_POINTS);

plot_graph(gr,"phase_config_dx="+DX+".eps");